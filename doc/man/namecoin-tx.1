.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.
.TH BEESO-TX "1" "May 2019" "beeso-tx v0.18.99.0" "User Commands"
.SH NAME
beeso-tx \- manual page for beeso-tx v0.18.99.0
.SH SYNOPSIS
.B beeso-tx
[\fI\,options\/\fR] \fI\,<hex-tx> \/\fR[\fI\,commands\/\fR]  \fI\,Update hex-encoded transaction\/\fR
.br
.B beeso-tx
[\fI\,options\/\fR] \fI\,-create \/\fR[\fI\,commands\/\fR]   \fI\,Create hex-encoded transaction\/\fR
.SH DESCRIPTION
Beeso Core beeso\-tx utility version v0.18.99.0
.SH OPTIONS
.HP
\-?
.IP
Print this help message and exit
.HP
\fB\-create\fR
.IP
Create new, empty TX.
.HP
\fB\-json\fR
.IP
Select JSON output
.HP
\fB\-nameencoding\fR
.IP
The encoding to use for names in the JSON output (default: ascii)
.HP
\fB\-txid\fR
.IP
Output only the hex\-encoded transaction id of the resultant transaction.
.HP
\fB\-valueencoding\fR
.IP
The encoding to use for values in the JSON output (default: ascii)
.PP
Chain selection options:
.HP
\fB\-testnet\fR
.IP
Use the test chain
.PP
Commands:
.IP
delin=N
.IP
Delete input N from TX
.IP
delout=N
.IP
Delete output N from TX
.IP
in=TXID:VOUT(:SEQUENCE_NUMBER)
.IP
Add input to TX
.IP
locktime=N
.IP
Set TX lock time to N
.IP
namefirstupdate=N:NAME:VALUE:RAND
.IP
Turns the existing output N into a NAME_FIRSTUPDATE operation with the
given hex\-encoded NAME, VALUE and RAND.
.IP
namenew=N:NAME:RAND
.IP
Turns the existing output N into a NAME_NEW operation with the given
hex\-encoded NAME and RAND.
.IP
nameupdate=N:NAME:VALUE
.IP
Turns the existing output N into a NAME_UPDATE operation with the given
hex\-encoded NAME and VALUE.
.IP
nversion=N
.IP
Set TX version to N
.IP
outaddr=VALUE:ADDRESS
.IP
Add address\-based output to TX
.IP
outdata=[VALUE:]DATA
.IP
Add data\-based output to TX
.IP
outmultisig=VALUE:REQUIRED:PUBKEYS:PUBKEY1:PUBKEY2:....[:FLAGS]
.IP
Add Pay To n\-of\-m Multi\-sig output to TX. n = REQUIRED, m = PUBKEYS.
Optionally add the "W" flag to produce a
pay\-to\-witness\-script\-hash output. Optionally add the "S" flag to
wrap the output in a pay\-to\-script\-hash.
.IP
outpubkey=VALUE:PUBKEY[:FLAGS]
.IP
Add pay\-to\-pubkey output to TX. Optionally add the "W" flag to produce a
pay\-to\-witness\-pubkey\-hash output. Optionally add the "S" flag to
wrap the output in a pay\-to\-script\-hash.
.IP
outscript=VALUE:SCRIPT[:FLAGS]
.IP
Add raw script output to TX. Optionally add the "W" flag to produce a
pay\-to\-witness\-script\-hash output. Optionally add the "S" flag to
wrap the output in a pay\-to\-script\-hash.
.IP
replaceable(=N)
.IP
Set RBF opt\-in sequence number for input N (if not provided, opt\-in all
available inputs)
.IP
sign=SIGHASH\-FLAGS
.IP
Add zero or more signatures to transaction. This command requires JSON
registers:prevtxs=JSON object, privatekeys=JSON object. See
signrawtransactionwithkey docs for format of sighash flags, JSON
objects.
.PP
Register Commands:
.IP
load=NAME:FILENAME
.IP
Load JSON file FILENAME into register NAME
.IP
set=NAME:JSON\-STRING
.IP
Set register NAME to given JSON\-STRING
.SH COPYRIGHT
Copyright (C) 2009-2019 The Bitcoin Core and Beeso developers

Please contribute if you find Beeso Core useful. Visit
<https://beeso.org/> for further information about the software.
The source code is available from <https://github.com/beeso/beeso-core>.

This is experimental software.
Distributed under the MIT software license, see the accompanying file COPYING
or <https://opensource.org/licenses/MIT>
